# journey2-events-service-vpc-environment
AWSTemplateFormatVersion: 2010-09-09

Description: Journey2 environment

Parameters:
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'

Resources:

  # Create a VPC

  # A VPC is an isolated portion of the AWS cloud populated by AWS objects, such as Amazon EC2 instances.
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'

  # Attach an Internet gateway to the VPC

  # Creates a new Internet gateway in your AWS account. After creating the Internet gateway, you then attach it to a VPC.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'

  # Attaches a gateway to a VPC.
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Create public subnets - normally you put LB here, but I'm going to put my instances here

  # A network subnet within the VPC.
  SubnetAPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'

  # # A network subnet within the VPC.
  # SubnetBPublic:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: 10.0.3.0/24
  #     AvailabilityZone: us-east-1b
  #     Tags:
  #       - Key: Application
  #         Value: !Ref 'AWS::StackName'

  # Route the traffic from public subnets to the Internet gateway

  # Creates a new route table within a VPC.
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Ref 'AWS::StackName'

  # Creates a new route in a route table within a VPC.
  RouteTablePublicInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Associates a subnet with a route table.
  RouteTableAssociationAPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTablePublic

  # # Associates a subnet with a route table.
  # RouteTableAssociationBPublic:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #     SubnetId: !Ref SubnetBPublic
  #     RouteTableId: !Ref RouteTablePublic

  # ACL

  # Creates a new network ACL in a VPC.
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: Public

  # Associates a subnet with a network ACL.
  SubnetNetworkAclAssociationAPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      NetworkAclId: !Ref NetworkAclPublic

  # # Associates a subnet with a network ACL.
  # SubnetNetworkAclAssociationBPublic:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref SubnetBPublic
  #     NetworkAclId: !Ref NetworkAclPublic


  # ACL rules

  # Creates a rule in a network ACL.
  # Allows incoming SSH connections
  InboundSSHPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 110
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false # Incoming traffic
      CidrBlock: '0.0.0.0/0' # everyone
      PortRange:
        From: 22
        To: 22

  # Creates a rule in a network ACL.
  # Allows accessing events service from all over Internet
  InboundEventsServicePublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 111
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false # Incoming traffic
      CidrBlock: '0.0.0.0/0' # everyone
      PortRange:
        From: 8600
        To: 8600

  # Creates a rule in a network ACL.
  # Allows certbot to renew certificates - this is not a good practice
  InboundCertbotPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 112
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false # Incoming traffic
      CidrBlock: '0.0.0.0/0' # everyone
      PortRange:
        From: 80
        To: 80

  # Creates a rule in a network ACL.
  # In case instance initiates the internet connection (like 'git pull'),
  # this rule allows responses to come in
  InboundResponsesPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 115
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false # Incoming traffic
      CidrBlock: '0.0.0.0/0' # everyone
      PortRange:
        From: 32768
        To: 65535

  # Creates a rule in a network ACL.
  # Allows all outbound traffic
  OutboundPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: true # Outbound traffic
      CidrBlock: '0.0.0.0/0' # everyone
      PortRange:
        From: 0
        To: 65535

  # Create EC2 instances in a security group

  # A security group is a set of firewall rules that control the traffic for your instance.
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22 + web access
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22' # SSH
          ToPort: '22'
          CidrIp: 0.0.0.0/0 # ! Everyone can access! Careful!
        - IpProtocol: tcp
          FromPort: '8600' # events service
          ToPort: '8600'
          CidrIp: 0.0.0.0/0 # ! Everyone can access! Careful!
        - IpProtocol: tcp
          FromPort: '80' # certbot
          ToPort: '80'
          CidrIp: 0.0.0.0/0 # ! Everyone can access! Careful!
        # - IpProtocol: tcp
        #   FromPort: '0'
        #   ToPort: '65535'
        #   CidrIp: 10.0.2.0/24 # Cross subnet traffic
        # - IpProtocol: tcp
        #   FromPort: '0'
        #   ToPort: '65535'
        #   CidrIp: 10.0.3.0/24  # Cross subnet traffic

  EC2InstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties: 
        InstanceProfileName: Journey2EventsServiceInstanceProfile
        Roles: 
          - Fn::ImportValue: Journey2EventsServiceRoleName

  EC2Instance1:
      Type: AWS::EC2::Instance
      Properties:
        # Ubuntu Server 20.04 LTS (HVM), SSD Volume Type
        ImageId: ami-09e67e426f25ce0d7 # TODO: for now hardcoded
        IamInstanceProfile: !Ref EC2InstanceProfile
        InstanceType: t2.nano # TODO: for now hardcoded
        SubnetId: !Ref SubnetAPublic
        KeyName: !Ref KeyName
        SecurityGroupIds: # Since we are using VPC, we need to use SecurityGroupIds and not SecurityGroups
          - !Ref EC2SecurityGroup
        Tags:
          - Key: Application
            Value: !Ref 'AWS::StackId'
          - Key: Name
            Value: Journey2-Server-1

  # EC2Instance2:
  #     Type: AWS::EC2::Instance
  #     Properties:
  #       ImageId: ami-09e67e426f25ce0d7 # TODO: for now hardcoded
  #       IamInstanceProfile: !Ref EC2InstanceProfile
  #       InstanceType: t2.nano # TODO: for now hardcoded
  #       SubnetId: !Ref SubnetBPublic
  #       KeyName: !Ref KeyName
  #       SecurityGroupIds: # Since we are using VPC, we need to use SecurityGroupIds and not SecurityGroups
  #         - !Ref EC2SecurityGroup
  #       Tags:
  #         - Key: Application
  #           Value: !Ref 'AWS::StackId'
  #         - Key: Name
  #           Value: Journey2-Server-2

  # Allocates an Elastic IP (EIP) address
  Instance1EIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EC2Instance1

  # # Allocates an Elastic IP (EIP) address
  # Instance2EIP:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     InstanceId: !Ref EC2Instance2

  # DNS record
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: ZAP3BNUK36WA4 # TODO: now hard-coded artemkv.net
      Name: journey2-events.artemkv.net
      Type: A
      TTL: 900 # 15 minutes
      ResourceRecords:
      - !Ref Instance1EIP

# public
# 10.0.2.0/24
# 10.0.3.0/24